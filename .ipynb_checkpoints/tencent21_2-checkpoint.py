'''小A在玩一个网络游戏。这个游戏有个抽装备环节。装备池总共有n+m件装备，分别为n件普通装备和m件ssr装备。抽一次装备的费用按你抽中的装备决定。
抽中每一件装备的概率都为1/(n+m)。如果你抽中了ssr装备。这次的抽装备费用为2金币，否则这次的费用为1金币。如果你抽中了ssr装备，得到奖励，并且装备不会放回。如果你抽中了普通装备。得到奖励，但是这件装备会放回装备池。现在小A希望抽中所有的ssr装备，请你计算一下：需要花费金币的期望值。'''
n = (int)input()
m = input()
# def getOneCost(n, m): # 返回拿到一次ssr所需的cost期望
#     p_ssr = m / (n + m) # 抽到一次ssr的概率
#     ssr_times = 1 / p_ssr
#     p_plain = 
#     plain_times = 
def totalSum(m, n):  # 拿到m个ssr的cost期望
    sum_ = 0
    for i in range(1, m + 1):   # m越拿越少
        sum_ += 1 / i     # 求拿到n的平均次数
    return sum_* n + 2 * m
print(totalSum(m, n))

'''
【总结】：在m+n里边抽到m的概率是p=m/(n+m)，现在假设一共进行了1/p次试验，则前1/p-1次都抽到了n，for循环就是根据这一特点计算了当前轮次的（抽取到一次ssr）期望，然后变换m，求和
由于m不放回，所以每次抽取m的概率不一样，第一次是公式带入m，下一次是带入m-1……以此类推

几何分布，抽到ssr概率为p，第x次抽到ssr，前x-1次抽到普通的期望EX=1/p，也就是抽到ssr的次数期望为1，抽到普通的次数期望为(1/p)-1，最后花费期望就是1/p-1+2 = 1/p+1 = 2+n/i(p=i/(i+n))   

【解析】如果有n张普通卡，m张ssr卡，假设平均随机抽取N次，从期望来讲，抽到一张m卡，对应抽到n/m张普通卡；所以第m-i次抽到ssr卡的期望金币是： 2*1+1*n/i；最后结果累加

先考虑在n件普通装备，m件神装情况下，只抽一件神装的花费期望。这里，抽中一件神装的概率为p=m/(m+n)。现在计算抽的次数的期望。 假若第一次抽中，概率为1/p(笔误，p), 第二次才抽中(第一次放回),概率为1/(1-p)*1/p,  第三次才抽中，概率为1/(1-p)*1/(1-p)*1/p。。。
这个分布期望就是所谓几何分布， 跟一直打靶直到打中为止的概率模型是一样的，期望次数是1/p ，这个有兴趣可以翻概率论，期望是一个级数求和。 那么只抽一件神装的次数期望就是1/p。现在求花费期望， 就像前面讲的打靶模型， 你抽了1/p次才抽中神装， 意味着前面 （1/p-1）次都抽的普通装， 那么前面花费是 （1/p-1）* 1 = 1/p-1 元， 最后一次抽中神装， 花费2元。所以，只抽一件神装的花费期望=1/p-1 + 2 = 1/p + 1 = (2m+n)/m 元。那么好了，我抽完一件神装后，再抽一件，花费期望不就是 (2(m-1)+n)/(m-1) , 然后累加下去不就是抽m件神装的总花费期望。

作者：PyTorch2.1
链接：https://www.nowcoder.com/discuss/353158431764848640
来源：牛客网'''